name: Terraform eks deployment
on:
  push:
    branches:
      - "feature/**"
      - "staging"
      - "main"

env:
  AWS_REGION: "us-east-1"
  ENVIRONMENT_STAGE: ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'dev' }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  eks-deployment:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./roots/project-x-main-root/
        shell: bash
    environment: ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'dev' }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          role-session-name: GitHubTerraform
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -backend-config="bucket=project-x-state-bucket-david-${ENVIRONMENT_STAGE}"

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # # Run automated terraform tests - we don't have it
      # - name: Terratest
      #   run: |
      #     go mod init
      #     go get github.com/gruntwork-io/terratest
      #     go get github.com/stretchr/testify
      #     go test -v -tags=unit

      # Generates an execution plan for Terraform
      # - name: Terraform Plan
      # run: terraform plan -input=false -var-file=project-x-${ENVIRONMENT_STAGE}.tfvars

      # # Build infrastructure according to Terraform configuration files
      # - name: Terraform Apply
      # run: terraform apply -auto-approve -input=false -var-file=project-x-${ENVIRONMENT_STAGE}.tfvars

      # # Build infrastructure according to Terraform configuration files
      - name: Terraform destroy
        run: terraform destroy -var-file=project-x-${ENVIRONMENT_STAGE}.tfvars
